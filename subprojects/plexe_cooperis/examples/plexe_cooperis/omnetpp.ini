[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 10s
num-rngs = 6

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true
eventlog-file = ${resultdir}/none.elog
snapshot-file = ${resultdir}/none.sna

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

sim-time-limit = 360 s

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = true

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.01s
*.manager.host = "localhost"
*.manager.moduleType = "vtypeauto=org.car2x.plexe.subprojects.plexe_cooperis.PlatoonCarRis"
*.manager.moduleName = "vtypeauto=node"
*.manager.moduleDisplayString = ""
*.manager.autoShutdown = true
*.manager.margin = 25
*.manager.order = -1

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 0mW
*.**.nic.mac1609_4.bitrate = 6Mbps

*.**.nic.mac1609_4.useAcks = true
*.**.nic.mac1609_4.ackErrorRate = 0.0
*.**.nic.mac1609_4.frameErrorRate = 0.0

*.**.nic.phy80211p.minPowerLevel = -94dBm
*.**.nic.phy80211p.maxTXPower = 100mW
*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -95dBm
*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895
*.node[*].veinsmobility.x = 0
*.node[*].veinsmobility.y = 0
*.node[*].veinsmobility.z = 1.895
*.shockwave[*].mobility.x = 0
*.shockwave[*].mobility.y = 0
*.shockwave[*].mobility.z = 1.895

# RIS configuration

# using sumo coordinates
*.ris[*].mobility_type = "SUMOBaseMobility"
*.ris[0].mobility.x = 100
*.ris[0].mobility.y = -95
*.ris[0].mobility.z = 10

# RIS facing south
*.ris[0].nicRis.phyRis.ris_v1_x = 1
*.ris[0].nicRis.phyRis.ris_v1_y = 0
*.ris[0].nicRis.phyRis.ris_v1_z = 0

*.ris[0].nicRis.phyRis.ris_v2_x = 0
*.ris[0].nicRis.phyRis.ris_v2_y = 0
*.ris[0].nicRis.phyRis.ris_v2_z = -1

*.ris[0].nicRis.phyRis.initialIncidencePhi = 103.799 deg
*.ris[0].nicRis.phyRis.initialIncidenceTheta = 79.0084 deg

*.ris[0].nicRis.phyRis.initialReflectionPhi = 0 deg
*.ris[0].nicRis.phyRis.initialReflectionTheta = 0 deg

*.ris[*].nicRis.phyRis.initialConfigurationTime = 1.05 s

*.**.nicRis.phyRis.usePropagationDelay = true
*.**.nicRis.phyRis.useNoiseFloor = true
# 1.3803e-23 (boltzmann) * 290 kelvin * BW (400 MHz) * 1000 (W to mW) * 6 (noise figure)
*.**.nicRis.phyRis.noiseFloor = -80dBm
*.**.nicRis.phyRis.analogueModels = xmldoc("config-ris.xml")
*.**.nicRis.phyRis.decider = xmldoc("config-ris.xml")
*.**.nicRis.phyRis.minPowerLevel = -80dBm
*.**.nicRis.phyRis.txPower = 1000mW
*.**.nicRis.phyRis.bitrate = 120Mbps
*.**.nicRis.phyRis.centerFrequency = 25GHz
*.**.nicRis.phyRis.repropagationThreshold = -80dBm

*.obstaclesRis.obstacles = xmldoc("config-ris.xml", "//AnalogueModel[@type='SimpleObstacleShadowingRis']/obstacles")
*.obstaclesRis.debug = true

##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
*.shockwave[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].helper_type = "PositionHelper"
*.shockwave[*].helper_type = "PositionHelper"

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].scenario.caccC1 = 0.5
*.node[*].scenario.caccXi = 1
*.node[*].scenario.caccOmegaN = 0.2 Hz
*.node[*].scenario.caccSpacing = 5 m
*.node[*].scenario.engineTau = 0.5 s
*.node[*].scenario.ploegH = 0.5 s
*.node[*].scenario.ploegKp = 0.2
*.node[*].scenario.ploegKd = 0.7
*.node[*].scenario.useRealisticEngine = false
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].scenario.useControllerAcceleration = true
*.node[*].scenario.nLanes = 1
*.node[*].scenario.targetController = "CACC"

#headway for ACCs (when used as followers)
*.node[*].scenario.accHeadway = 0.1 s
*.node[*].scenario.leaderHeadway = ${leaderHeadway = 1.2} s

#average leader speed
*.node[*].scenario.leaderSpeed = ${leaderSpeed = 50} kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].appl.*.scalar-recording = true
*.node[*].appl.*.vector-recording = true
#use the join at back implementation of the join maneuver
*.node[*].appl.joinManeuver = "JoinAtBack"
*.node[*].appl.mergeManeuver = "MergeAtBack"

##########################################################
#                      Applications                      #
##########################################################

*.node[*].numPlexeApps = 1
*.node[*].plexeApp[0].typename = "HelloPlexeApp"
*.node[*].plexeApp[0].interfaceToUse = "COOPERIS"
*.node[*].plexeApp[0].sendMessageAfter = 18s
*.node[*].plexeApp[0].senderVehicleId = 1

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].prot.*.scalar-recording = true
*.node[*].prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].prot.beaconingInterval = 0.1 s
#access category for platooning beacons
*.node[*].prot.priority = 4
#packet size for platooning beacon
*.node[*].prot.packetSize = 200

##########################################################
#                    Traffic manager                     #
##########################################################

#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
**.traffic.shockwaveVType = "shockwave"
**.traffic.injectShockwaveCars = false
#controllers to be tested
**.numericController = ${controller = 0}
*.traffic.controller = ${sController = "CACC" ! controller}
#insert vehicles already at steady-state. distance depends on controller
**.traffic.platoonInsertDistance = ${5 ! controller}m
**.traffic.platoonInsertHeadway = ${0 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s

**.traffic.platoonSizeA = 1
**.traffic.platoonSizeB = 1

#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false

[Config WithShadowing]
# 11p shadowing
*.useBuildingShadowing = true
*.**.nic.phy80211p.analogueModels = xmldoc("config_shadowing.xml")
*.obstacles.obstacles = xmldoc("config_shadowing.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

[Config WithoutShadowing]
# perfect conditions
*.useBuildingShadowing = false
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")

[Config Base]
*.manager.command = "sumo-gui"

*.node[*].scenario_type = "SimpleIntersectionScenario"

*.useBuildingShadowing = true
# no need to configure shadowing for RIS, it is always active
*.**.nic.phy80211p.analogueModels = xmldoc("config_shadowing.xml")
*.obstacles.obstacles = xmldoc("config_shadowing.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

# double (triple, ...) path loss?
#**.dummydouble = ${doublePathLoss = 0, 1}
**.dummydouble = ${doublePathLoss = 1}
#*.**.nicRis.phyRis.useProductOfDistances = ${false, true ! doublePathLoss}
*.**.nicRis.phyRis.useProductOfDistances = true

*.node[0].prot.beaconingInterval = -1s

#insert platooning vehicles with a speed of
**.traffic.leftRightCarSpeed = ${leaderSpeed}kmph
**.traffic.bottomRightCarSpeed = 0 kmph

# *.**.nicRis.phyRis.noiseFloor = -10000dBm
# *.**.nicRis.phyRis.minPowerLevel = -10000dBm
# by setting this to true, every signal is received, regardless of noise and interference
# by setting it to false, the model will compute SINR depending at least on noise
*.**.nicRis.phyRis.ignoreNoiseAndInterference = false
*.**.nicRis.phyRis.repropagationThreshold = -10000dBm

*.**.nicRis.phyRis.txGain = 30dB
*.**.nicRis.phyRis.rxGain = 30dB

#**.dummyinitpos = ${initPos = 0, 5, 10, 15, 20, 25, 50, 75, 100, 150, 200}
**.dummyinitpos = ${initPos = 50}

[Config TrackingBase]
extends = Base

**.traffic.leftRightInitialPosition = 200

#**.dummyconfig = ${risConfig = 5, 6, 7, 8, 9, 10, 12, 15, 18, 20}
**.dummyconfig = ${risConfig = 20}
*.**.nicRis.phyRis.codingStates = 8
*.**.nicRis.phyRis.cellsPerLambda = 2
*.**.nicRis.phyRis.lambdaSize = ${risConfig}

[Config TIntersection]

network = TIntersection

# in this scenario we use a RIS reflecting the signal towards the receiver
**.useRis = true
# this tells the receiver to ignore a signal that is not reflected. it is necessary at the moment because
# non reflected signals arrive first at the receiver
# this will result in a capture effect, where the radio will try to decode the first one while the
# reflected one will be treated as interference, causing the first one not to be decoded (most probably)
*.**.nicRis.phyRis.ignoreNonReflectedSignals = true
# this tells a receiver to ignore a shadowed signal, i.e., pretend like it does not exist, nor for trying
# to decode it, nor as interference. In addition it tells a RIS not to reflect such a signal
*.**.nicRis.phyRis.ignoreShadowedSignals = true

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/t-intersection.sumo.cfg"
*.manager.launchConfig = xmldoc("./sumocfg/t-intersection.launchd.xml")

**.traffic_type = "IntersectionTrafficManager"
**.traffic.routeLeftRight = "left_right"
**.traffic.routeBottomRight = "bottom_right"
**.traffic.leftRightInitialPosition = 200
# last valid position: 588
**.traffic.bottomRightInitialPosition = 588 - ${initPos}

**.node[*].prot.intersectionEdge = "RIGHT_1"

[Config TIntersectionNoRis]

network = TIntersection
# in this scenario we do not consider a RIS
**.useRis = false
# given that there are not RIS, the only incoming signals will be direct from the transmitter, so we can't ignore them
*.**.nicRis.phyRis.ignoreNonReflectedSignals = false
# as above, we do not count on reflected signals, so have to consider shadowed signals as well and try to decode them
*.**.nicRis.phyRis.ignoreShadowedSignals = false

#launch config. tells Veins which SUMO configuration to run
*.manager.configFile = "./sumocfg/t-intersection.sumo.cfg"
*.manager.launchConfig = xmldoc("./sumocfg/t-intersection.launchd.xml")

**.traffic_type = "IntersectionTrafficManager"
**.traffic.routeLeftRight = "left_right"
**.traffic.routeBottomRight = "bottom_right"
**.traffic.leftRightInitialPosition = 200
# last valid position: 588
**.traffic.bottomRightInitialPosition = 588 - ${initPos}

**.node[*].prot.intersectionEdge = "RIGHT_1"

[Config TrackingTIntersection]
extends = TrackingBase,TIntersection

*.ris[0].nicRis.phyRis.focusBeamFrom = "TIntersection.node[1]"
*.ris[0].nicRis.phyRis.destinationNodesToTrack = "TIntersection.node[0]"

output-vector-file = ${resultdir}/${configname}_${repetition}_${initPos}_${doublePathLoss}_${risConfig}.vec
output-scalar-file = ${resultdir}/${configname}_${repetition}_${initPos}_${doublePathLoss}_${risConfig}.sca

[Config TrackingTIntersectionNoRis]
extends = TrackingBase,TIntersectionNoRis

*.ris[0].nicRis.phyRis.focusBeamFrom = "TIntersection.node[1]"
*.ris[0].nicRis.phyRis.destinationNodesToTrack = "TIntersection.node[0]"

output-vector-file = ${resultdir}/${configname}_${repetition}_${initPos}_${doublePathLoss}_${risConfig}.vec
output-scalar-file = ${resultdir}/${configname}_${repetition}_${initPos}_${doublePathLoss}_${risConfig}.sca

[Config NoGui]
*.manager.command = "sumo"
*.manager.ignoreGuiCommands = true

[Config TrackingTIntersectionNoGui]
extends = NoGui,TrackingTIntersection

output-vector-file = ${resultdir}/TrackingTIntersection_${repetition}_${initPos}_${doublePathLoss}_${risConfig}.vec
output-scalar-file = ${resultdir}/TrackingTIntersection_${repetition}_${initPos}_${doublePathLoss}_${risConfig}.sca
