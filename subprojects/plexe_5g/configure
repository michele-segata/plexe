#!/usr/bin/env python3

#
# Copyright (C) 2013-2025 Christoph Sommer <sommer@ccs-labs.org>
#
# Documentation for these modules is at http://veins.car2x.org/
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

"""
Creates Makefile(s) for building this project.
"""
import os as os
from os import mkdir
from os.path import join, isdir
import subprocess
import sys
# avoid adding __init__.py to src and scripts folders
sys.path.insert(0, "../../src/scripts/")
from library import Library, LibraryChecker

plexe = Library(name="Plexe", library="plexe", default_path="../../",
                versions=["3.1.3", "3.1.4", "3.2"], source_folder="src/plexe",
                lib_folder="src", images_folder="images",
                version_script="print-plexe-version")
veins = Library(name="Veins", library="veins", default_path="../../../veins",
                versions=["5.2", "5.3", "5.3.1"], source_folder="src/veins", lib_folder="src",
                images_folder="images", version_script="print-veins-version")
veins_inet = Library(name="Veins INET 4", library="veins_inet",
                     default_path="../../../veins/subprojects/veins_inet",
                     versions=["5.2", "5.3", "5.3.1"], source_folder="src/veins_inet",
                     lib_folder="src", images_folder="images",
                     version_script="print-veins_inet-version")
inet = Library(name="INET", library="INET", default_path="../../../inet",
               versions=["4.5.0", "4.5.4"], source_folder="src/inet", lib_folder="src",
               images_folder="images",
               version_script=["_scripts/get_version", "bin/inet_version"])
simu5g = Library(name="Simu5G", library="simu5g",
                  default_path="../../../simu5g", versions=["1.2.2", "1.3.1"],
                  source_folder="src/simu5g", lib_folder="src",
                  images_folder="images", version_script="Version",
                  run_version_script=False, ned_folder="src")

libraries = LibraryChecker()
libraries.add_lib(plexe)
libraries.add_lib(veins)
libraries.add_lib(veins_inet)
libraries.add_lib(inet)
libraries.add_lib(simu5g)

# Start with default flags
makemake_flags = ["-f", "--deep", "--make-so", "-I", ".", "-o", "plexe_5g", "-O", "out", "-p", "PLEXE_5G"]
run_libs = [join("src", "plexe_5g")]
run_neds = [join("src", "plexe_5g")]
run_imgs = []

libraries.check_libraries(makemake_flags, run_libs, run_neds, run_imgs)


# Add Plexe-Matlab dependencies
run_imgs.append(join("images"))

# Add Matlab flags
matlab_path = "/Applications/MATLAB_R2024b.app"

check_fname = os.path.join(matlab_path, 'VersionInfo.xml')
expect_version = 'R2024b'
if not os.path.isfile(check_fname):
    print('Could not find MATLAB')
    sys.exit(1)

matlab_includes = ["-I" + os.path.join(os.path.relpath(matlab_path, 'src'), 'extern', 'include')]
matlab_extern = None
archs = ['glnxa64', 'maci64', 'win64', 'maca64']
basepath = os.path.join(os.path.relpath(matlab_path, 'src'), 'extern', 'bin')
for ss in archs:
    s = os.path.join(basepath, ss)
    if os.path.isdir(s):
        matlab_extern = s
        print('Found Matlab version {}. Okay.'.format(expect_version))
if not matlab_extern:
    print('Could not detect architecture to link MATLAB with. Expected one of {} in {}'.format(archs, basepath))
    sys.exit(1)
matlab_link = ["-L" + matlab_extern, "-lMatlabEngine", "-lMatlabDataArray"]

matlab_defs = []

makemake_flags += matlab_includes + matlab_link + matlab_defs
run_libs = [os.path.join(matlab_extern, 'MatlabEngine')] + run_libs
run_libs = [os.path.join(matlab_extern, 'MatlabDataArray')] + run_libs





# Start creating files
if not isdir("out"):
    mkdir("out")

f = open(join("out", "config.py"), "w")
f.write("run_libs = %s\n" % repr(run_libs))
f.write("run_neds = %s\n" % repr(run_neds))
f.write("run_imgs = %s\n" % repr(run_imgs))
f.close()

subprocess.check_call(["env", "opp_makemake"] + makemake_flags, cwd="src")

print("Configure done. You can now run 'make'.")
